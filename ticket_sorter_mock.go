// Code generated by MockGen. DO NOT EDIT.
// Source: ./ticket_sorter.go

// Package ticket_sorter is a generated GoMock package.
package ticket_sorter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockITicketSorter is a mock of ITicketSorter interface
type MockITicketSorter struct {
	ctrl     *gomock.Controller
	recorder *MockITicketSorterMockRecorder
}

// MockITicketSorterMockRecorder is the mock recorder for MockITicketSorter
type MockITicketSorterMockRecorder struct {
	mock *MockITicketSorter
}

// NewMockITicketSorter creates a new mock instance
func NewMockITicketSorter(ctrl *gomock.Controller) *MockITicketSorter {
	mock := &MockITicketSorter{ctrl: ctrl}
	mock.recorder = &MockITicketSorterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITicketSorter) EXPECT() *MockITicketSorterMockRecorder {
	return m.recorder
}

// Sort mocks base method
func (m *MockITicketSorter) Sort(cards []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", cards)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sort indicates an expected call of Sort
func (mr *MockITicketSorterMockRecorder) Sort(cards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockITicketSorter)(nil).Sort), cards)
}
