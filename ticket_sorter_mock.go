// Code generated by MockGen. DO NOT EDIT.
// Source: ./ticket_sorter.go

// Package ticket_sorter is a generated GoMock package.
package ticket_sorter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockITicketSort is a mock of ITicketSort interface
type MockITicketSort struct {
	ctrl     *gomock.Controller
	recorder *MockITicketSortMockRecorder
}

// MockITicketSortMockRecorder is the mock recorder for MockITicketSort
type MockITicketSortMockRecorder struct {
	mock *MockITicketSort
}

// NewMockITicketSort creates a new mock instance
func NewMockITicketSort(ctrl *gomock.Controller) *MockITicketSort {
	mock := &MockITicketSort{ctrl: ctrl}
	mock.recorder = &MockITicketSortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockITicketSort) EXPECT() *MockITicketSortMockRecorder {
	return m.recorder
}

// Sort mocks base method
func (m *MockITicketSort) Sort(cards []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", cards)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sort indicates an expected call of Sort
func (mr *MockITicketSortMockRecorder) Sort(cards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockITicketSort)(nil).Sort), cards)
}
